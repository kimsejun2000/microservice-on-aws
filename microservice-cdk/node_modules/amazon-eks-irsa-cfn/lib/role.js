"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const util_1 = require("./util");
const aws_cloudformation_1 = require("@aws-cdk/aws-cloudformation");
const aws_lambda_1 = require("@aws-cdk/aws-lambda");
const path = require("path");
/**
 * IAM Role
 *
 * Defines an IAM role. The role is created with an assume policy document associated with
 * the specified AWS service principal defined in `serviceAssumeRole`.
 */
class Role extends core_1.Resource {
    constructor(scope, id, props) {
        var _a;
        super(scope, id, {
            physicalName: props.roleName,
        });
        this.grantPrincipal = this;
        this.assumeRoleAction = 'sts:AssumeRoleWithWebIdentity';
        this.managedPolicies = [];
        this.attachedPolicies = new util_1.AttachedPolicies();
        this.managedPolicies.push(...props.managedPolicies || []);
        this.permissionsBoundary = props.permissionsBoundary;
        const maxSessionDuration = props.maxSessionDuration && props.maxSessionDuration.toSeconds();
        validateMaxSessionDuration(maxSessionDuration);
        const description = (props.description && ((_a = props.description) === null || _a === void 0 ? void 0 : _a.length) > 0) ? props.description : undefined;
        if (description && description.length > 1000) {
            throw new Error('Role description must be no longer than 1000 characters.');
        }
        if (!Role.fn) {
            Role.fn = new aws_lambda_1.Function(scope, 'IAMRoleForK8SSvcAcctCustomResource', {
                code: aws_lambda_1.Code.fromAsset(path.resolve(__dirname, '..', 'lambda-packages', 'role_handler')),
                handler: 'index.handler',
                runtime: aws_lambda_1.Runtime.NODEJS_12_X,
                timeout: core_1.Duration.minutes(15),
            });
            Role.fn.addToRolePolicy(new aws_iam_1.PolicyStatement({
                actions: [
                    'eks:DescribeCluster',
                    'iam:AttachRolePolicy',
                    'iam:CreateRole',
                    'iam:DeleteRole',
                    'iam:DeleteRolePolicy',
                    'iam:DescribeRole',
                    'iam:DetachRolePolicy',
                    'iam:GetRole',
                    'iam:ListAttachedRolePolicies',
                    'iam:ListRoles',
                    'iam:PutRolePermissionsBoundary',
                    'iam:PutRolePolicy',
                    'iam:TagRole',
                    'iam:UntagRole',
                    'iam:UpdateAssumeRolePolicy',
                    'iam:UpdateRole',
                    'sts:GetCallerIdentity'
                ],
                resources: ['*']
            }));
        }
        const role = new aws_cloudformation_1.CustomResource(this, 'Resource', {
            provider: aws_cloudformation_1.CustomResourceProvider.fromLambda(Role.fn),
            resourceType: 'Custom::IamRoleForServiceAccount',
            properties: {
                ClusterName: props.clusterName,
                Namespace: props.namespace || 'default',
                ServiceAccount: props.serviceAccount,
                ManagedPolicyArns: core_1.Lazy.listValue({ produce: () => this.managedPolicies.map(p => p.managedPolicyArn) }, { omitEmpty: true }),
                Policies: _flatten(props.inlinePolicies),
                Path: props.path,
                PermissionsBoundary: this.permissionsBoundary ? this.permissionsBoundary.managedPolicyArn : undefined,
                RoleName: this.physicalName,
                MaxSessionDuration: maxSessionDuration,
                Description: description,
            }
        });
        this.roleId = core_1.Token.asString(role.getAtt('RoleId'));
        this.roleArn = this.getResourceArnAttribute(core_1.Token.asString(role.getAtt('Arn')), {
            region: '',
            service: 'iam',
            resource: 'role',
            resourceName: this.physicalName,
        });
        this.roleName = this.getResourceNameAttribute(role.ref);
        this.policyFragment = new aws_iam_1.ArnPrincipal(this.roleArn).policyFragment;
        function _flatten(policies) {
            if (policies == null || Object.keys(policies).length === 0) {
                return undefined;
            }
            const result = new Array();
            for (const policyName of Object.keys(policies)) {
                const policyDocument = policies[policyName];
                result.push({ policyName, policyDocument });
            }
            return result;
        }
    }
    /**
     * Adds a permission to the role's default policy document.
     * If there is no default policy attached to this role, it will be created.
     * @param statement The permission statement to add to the policy document
     */
    addToPolicy(statement) {
        if (!this.defaultPolicy) {
            this.defaultPolicy = new aws_iam_1.Policy(this, 'DefaultPolicy');
            this.attachInlinePolicy(this.defaultPolicy);
        }
        this.defaultPolicy.addStatements(statement);
        return true;
    }
    /**
     * Attaches a managed policy to this role.
     * @param policy The the managed policy to attach.
     */
    addManagedPolicy(policy) {
        if (this.managedPolicies.find(mp => mp === policy)) {
            return;
        }
        this.managedPolicies.push(policy);
    }
    /**
     * Attaches a policy to this role.
     * @param policy The policy to attach
     */
    attachInlinePolicy(policy) {
        this.attachedPolicies.attach(policy);
        policy.attachToRole(this);
    }
    /**
     * Grant the actions defined in actions to the identity Principal on this resource.
     */
    grant(grantee, ...actions) {
        return aws_iam_1.Grant.addToPrincipal({
            grantee,
            actions,
            resourceArns: [this.roleArn],
            scope: this
        });
    }
    /**
     * Grant permissions to the given principal to pass this role.
     */
    grantPassRole(identity) {
        return this.grant(identity, 'iam:PassRole');
    }
}
exports.Role = Role;
function validateMaxSessionDuration(duration) {
    if (duration === undefined) {
        return;
    }
    if (duration < 3600 || duration > 43200) {
        throw new Error(`maxSessionDuration is set to ${duration}, but must be >= 3600sec (1hr) and <= 43200sec (12hrs)`);
    }
}
/**
 * A PolicyStatement that normalizes its Principal field differently
 *
 * Normally, "anyone" is normalized to "Principal: *", but this statement
 * normalizes to "Principal: { AWS: * }".
 */
class AwsStarStatement extends aws_iam_1.PolicyStatement {
    toStatementJson() {
        const stat = super.toStatementJson();
        if (stat.Principal === '*') {
            stat.Principal = { AWS: '*' };
        }
        return stat;
    }
}
//# sourceMappingURL=data:application/json;base64,