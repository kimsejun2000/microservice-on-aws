"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@aws-cdk/core");
const aws_cloudformation_1 = require("@aws-cdk/aws-cloudformation");
const aws_iam_1 = require("@aws-cdk/aws-iam");
const aws_lambda_1 = require("@aws-cdk/aws-lambda");
const path = require("path");
class OIDCIdentityProvider extends core_1.Resource {
    constructor(scope, id, props) {
        super(scope, id);
        if (!OIDCIdentityProvider.fn) {
            OIDCIdentityProvider.fn = new aws_lambda_1.Function(scope, 'OIDCIdentityProviderCustomResource', {
                code: aws_lambda_1.Code.fromAsset(path.resolve(__dirname, '..', 'lambda-packages', 'identity_provider_handler')),
                handler: 'index.handler',
                runtime: aws_lambda_1.Runtime.NODEJS_12_X,
                timeout: core_1.Duration.minutes(15),
            });
            OIDCIdentityProvider.fn.addToRolePolicy(new aws_iam_1.PolicyStatement({
                actions: [
                    'eks:DescribeCluster',
                    'iam:CreateOpenIDConnectProvider',
                    'iam:DeleteOpenIDConnectProvider'
                ],
                resources: ['*']
            }));
        }
        const provider = new aws_cloudformation_1.CustomResource(this, 'Resource', {
            provider: aws_cloudformation_1.CustomResourceProvider.fromLambda(OIDCIdentityProvider.fn),
            resourceType: 'Custom::EksOidcIdentityProvider',
            properties: {
                ClusterName: props.clusterName,
            }
        });
        this.providerArn = core_1.Token.asString(provider.getAtt('Arn'));
    }
}
exports.OIDCIdentityProvider = OIDCIdentityProvider;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWRlbnRpdHlwcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImlkZW50aXR5cHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSx3Q0FBcUU7QUFDckUsb0VBQXFGO0FBQ3JGLDhDQUFtRDtBQUNuRCxvREFBOEQ7QUFDOUQsNkJBQTZCO0FBUzdCLE1BQWEsb0JBQXFCLFNBQVEsZUFBUTtJQVM5QyxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQWdDO1FBQ3RFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFFakIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsRUFBRTtZQUMxQixvQkFBb0IsQ0FBQyxFQUFFLEdBQUcsSUFBSSxxQkFBUSxDQUFDLEtBQUssRUFBRSxvQ0FBb0MsRUFBRTtnQkFDaEYsSUFBSSxFQUFFLGlCQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDO2dCQUNuRyxPQUFPLEVBQUUsZUFBZTtnQkFDeEIsT0FBTyxFQUFFLG9CQUFPLENBQUMsV0FBVztnQkFDNUIsT0FBTyxFQUFFLGVBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDO2FBQ2hDLENBQUMsQ0FBQztZQUNILG9CQUFvQixDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsSUFBSSx5QkFBZSxDQUFDO2dCQUN4RCxPQUFPLEVBQUU7b0JBQ0wscUJBQXFCO29CQUNyQixpQ0FBaUM7b0JBQ2pDLGlDQUFpQztpQkFDcEM7Z0JBQ0QsU0FBUyxFQUFFLENBQUMsR0FBRyxDQUFDO2FBQ25CLENBQUMsQ0FBQyxDQUFDO1NBQ1A7UUFFRCxNQUFNLFFBQVEsR0FBRyxJQUFJLG1DQUFjLENBQUMsSUFBSSxFQUFFLFVBQVUsRUFBRTtZQUNsRCxRQUFRLEVBQUUsMkNBQXNCLENBQUMsVUFBVSxDQUFDLG9CQUFvQixDQUFDLEVBQUUsQ0FBQztZQUNwRSxZQUFZLEVBQUUsaUNBQWlDO1lBQy9DLFVBQVUsRUFBRTtnQkFDUixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVc7YUFDakM7U0FDSixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsV0FBVyxHQUFHLFlBQUssQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7Q0FDSjtBQXRDRCxvREFzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QsIER1cmF0aW9uLCBSZXNvdXJjZSwgVG9rZW4gfSBmcm9tICdAYXdzLWNkay9jb3JlJztcbmltcG9ydCB7IEN1c3RvbVJlc291cmNlLCBDdXN0b21SZXNvdXJjZVByb3ZpZGVyIH0gZnJvbSAnQGF3cy1jZGsvYXdzLWNsb3VkZm9ybWF0aW9uJztcbmltcG9ydCB7IFBvbGljeVN0YXRlbWVudCB9IGZyb20gJ0Bhd3MtY2RrL2F3cy1pYW0nO1xuaW1wb3J0IHsgRnVuY3Rpb24sIENvZGUsIFJ1bnRpbWUgfSBmcm9tICdAYXdzLWNkay9hd3MtbGFtYmRhJztcbmltcG9ydCAqIGFzIHBhdGggZnJvbSAncGF0aCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgT0lEQ0lkZW50aXR5UHJvdmlkZXJQcm9wcyB7XG4gICAgLyoqXG4gICAgICogVGhlIEVLUyBjbHVzdGVyIG5hbWUuXG4gICAgICovXG4gICAgcmVhZG9ubHkgY2x1c3Rlck5hbWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIE9JRENJZGVudGl0eVByb3ZpZGVyIGV4dGVuZHMgUmVzb3VyY2Uge1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIEFSTiBvZiB0aGUgaWRlbnRpdHkgcHJvdmlkZXIuXG4gICAgICpcbiAgICAgKiBAYXR0cmlidXRlXG4gICAgICovXG4gICAgcHVibGljIHJlYWRvbmx5IHByb3ZpZGVyQXJuOiBzdHJpbmc7XG5cbiAgICBwcml2YXRlIHN0YXRpYyBmbjogRnVuY3Rpb247XG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IE9JRENJZGVudGl0eVByb3ZpZGVyUHJvcHMpIHtcbiAgICAgICAgc3VwZXIoc2NvcGUsIGlkKTtcblxuICAgICAgICBpZiAoIU9JRENJZGVudGl0eVByb3ZpZGVyLmZuKSB7XG4gICAgICAgICAgICBPSURDSWRlbnRpdHlQcm92aWRlci5mbiA9IG5ldyBGdW5jdGlvbihzY29wZSwgJ09JRENJZGVudGl0eVByb3ZpZGVyQ3VzdG9tUmVzb3VyY2UnLCB7XG4gICAgICAgICAgICAgICAgY29kZTogQ29kZS5mcm9tQXNzZXQocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJ2xhbWJkYS1wYWNrYWdlcycsICdpZGVudGl0eV9wcm92aWRlcl9oYW5kbGVyJykpLFxuICAgICAgICAgICAgICAgIGhhbmRsZXI6ICdpbmRleC5oYW5kbGVyJyxcbiAgICAgICAgICAgICAgICBydW50aW1lOiBSdW50aW1lLk5PREVKU18xMl9YLFxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IER1cmF0aW9uLm1pbnV0ZXMoMTUpLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBPSURDSWRlbnRpdHlQcm92aWRlci5mbi5hZGRUb1JvbGVQb2xpY3kobmV3IFBvbGljeVN0YXRlbWVudCh7XG4gICAgICAgICAgICAgICAgYWN0aW9uczogW1xuICAgICAgICAgICAgICAgICAgICAnZWtzOkRlc2NyaWJlQ2x1c3RlcicsXG4gICAgICAgICAgICAgICAgICAgICdpYW06Q3JlYXRlT3BlbklEQ29ubmVjdFByb3ZpZGVyJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lhbTpEZWxldGVPcGVuSURDb25uZWN0UHJvdmlkZXInXG4gICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICByZXNvdXJjZXM6IFsnKiddXG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcm92aWRlciA9IG5ldyBDdXN0b21SZXNvdXJjZSh0aGlzLCAnUmVzb3VyY2UnLCB7XG4gICAgICAgICAgICBwcm92aWRlcjogQ3VzdG9tUmVzb3VyY2VQcm92aWRlci5mcm9tTGFtYmRhKE9JRENJZGVudGl0eVByb3ZpZGVyLmZuKSxcbiAgICAgICAgICAgIHJlc291cmNlVHlwZTogJ0N1c3RvbTo6RWtzT2lkY0lkZW50aXR5UHJvdmlkZXInLFxuICAgICAgICAgICAgcHJvcGVydGllczoge1xuICAgICAgICAgICAgICAgIENsdXN0ZXJOYW1lOiBwcm9wcy5jbHVzdGVyTmFtZSxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMucHJvdmlkZXJBcm4gPSBUb2tlbi5hc1N0cmluZyhwcm92aWRlci5nZXRBdHQoJ0FybicpKTtcbiAgICB9XG59XG4iXX0=