"use strict";
const assert_1 = require("@aws-cdk/assert");
const core_1 = require("@aws-cdk/core");
const eks = require("../lib");
const util_1 = require("./util");
module.exports = {
    'add Helm chart': {
        'should have default namespace'(test) {
            // GIVEN
            const { stack, cluster } = util_1.testFixtureCluster();
            // WHEN
            new eks.HelmChart(stack, 'MyChart', { cluster, chart: 'chart' });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource(eks.HelmChart.RESOURCE_TYPE, { Namespace: 'default' }));
            test.done();
        },
        'should have a lowercase default release name'(test) {
            // GIVEN
            const { stack, cluster } = util_1.testFixtureCluster();
            // WHEN
            new eks.HelmChart(stack, 'MyChart', { cluster, chart: 'chart' });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource(eks.HelmChart.RESOURCE_TYPE, { Release: 'stackmychartff398361' }));
            test.done();
        },
        'should use the last 53 of the default release name'(test) {
            // GIVEN
            const { stack, cluster } = util_1.testFixtureCluster();
            // WHEN
            new eks.HelmChart(stack, 'MyChartNameWhichISMostProbablyLongerThanFiftyThreeCharacters', { cluster, chart: 'chart' });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource(eks.HelmChart.RESOURCE_TYPE, { Release: 'hismostprobablylongerthanfiftythreecharacterscaf15d09' }));
            test.done();
        },
        'with values'(test) {
            // GIVEN
            const { stack, cluster } = util_1.testFixtureCluster();
            // WHEN
            new eks.HelmChart(stack, 'MyChart', { cluster, chart: 'chart', values: { foo: 123 } });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource(eks.HelmChart.RESOURCE_TYPE, { Values: '{\"foo\":123}' }));
            test.done();
        },
        'should support create namespaces by default'(test) {
            // GIVEN
            const { stack, cluster } = util_1.testFixtureCluster();
            // WHEN
            new eks.HelmChart(stack, 'MyChart', { cluster, chart: 'chart' });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource(eks.HelmChart.RESOURCE_TYPE, { CreateNamespace: true }));
            test.done();
        },
        'should support create namespaces when explicitly specified'(test) {
            // GIVEN
            const { stack, cluster } = util_1.testFixtureCluster();
            // WHEN
            new eks.HelmChart(stack, 'MyChart', { cluster, chart: 'chart', createNamespace: true });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource(eks.HelmChart.RESOURCE_TYPE, { CreateNamespace: true }));
            test.done();
        },
        'should not create namespaces when disabled'(test) {
            // GIVEN
            const { stack, cluster } = util_1.testFixtureCluster();
            // WHEN
            new eks.HelmChart(stack, 'MyChart', { cluster, chart: 'chart', createNamespace: false });
            // THEN
            assert_1.expect(stack).notTo(assert_1.haveResource(eks.HelmChart.RESOURCE_TYPE, { CreateNamespace: true }));
            test.done();
        },
        'should support waiting until everything is completed before marking release as successful'(test) {
            // GIVEN
            const { stack, cluster } = util_1.testFixtureCluster();
            // WHEN
            new eks.HelmChart(stack, 'MyWaitingChart', { cluster, chart: 'chart', wait: true });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource(eks.HelmChart.RESOURCE_TYPE, { Wait: true }));
            test.done();
        },
        'should default to not waiting before marking release as successful'(test) {
            // GIVEN
            const { stack, cluster } = util_1.testFixtureCluster();
            // WHEN
            new eks.HelmChart(stack, 'MyWaitingChart', { cluster, chart: 'chart' });
            // THEN
            assert_1.expect(stack).notTo(assert_1.haveResource(eks.HelmChart.RESOURCE_TYPE, { Wait: true }));
            test.done();
        },
        'should enable waiting when specified'(test) {
            // GIVEN
            const { stack, cluster } = util_1.testFixtureCluster();
            // WHEN
            new eks.HelmChart(stack, 'MyWaitingChart', { cluster, chart: 'chart', wait: true });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource(eks.HelmChart.RESOURCE_TYPE, { Wait: true }));
            test.done();
        },
        'should disable waiting when specified as false'(test) {
            // GIVEN
            const { stack, cluster } = util_1.testFixtureCluster();
            // WHEN
            new eks.HelmChart(stack, 'MyWaitingChart', { cluster, chart: 'chart', wait: false });
            // THEN
            assert_1.expect(stack).notTo(assert_1.haveResource(eks.HelmChart.RESOURCE_TYPE, { Wait: true }));
            test.done();
        },
        'should timeout only after 10 minutes'(test) {
            // GIVEN
            const { stack, cluster } = util_1.testFixtureCluster();
            // WHEN
            new eks.HelmChart(stack, 'MyChart', { cluster, chart: 'chart', timeout: core_1.Duration.minutes(10) });
            // THEN
            assert_1.expect(stack).to(assert_1.haveResource(eks.HelmChart.RESOURCE_TYPE, { Timeout: '600s' }));
            test.done();
        },
    },
};
//# sourceMappingURL=data:application/json;base64,